

 Sort  (cost=68425927.09..68531230.13 rows=42121213 width=1013)
   Sort Key: temp.participant_id, temp.uin, temp.settlement_date, s.symbol, temp.trans_type, temp.trn_code, temp.reason_code
   ->  WindowAgg  (cost=49869574.71..52396847.49 rows=42121213 width=1013)
         ->  Sort  (cost=49869574.71..49974877.74 rows=42121213 width=897)
               Sort Key: temp.settlement_date, temp.uin, temp.participant_id, temp.isin, temp.account_number
               ->  Merge Join  (cost=34360327.39..34992247.10 rows=42121213 width=897)
                     Merge Cond: ((temp.uin)::text = (cgt_eligible_uin_all.uin)::text)
                     ->  Sort  (cost=34090616.15..34090666.91 rows=20303 width=865)
                           Sort Key: temp.uin
                           ->  Nested Loop  (cost=34024572.70..34089163.53 rows=20303 width=865)
                                 Join Filter: ((temp.participant_id)::text = (x.participant_id)::text)
                                 ->  Nested Loop  (cost=34024485.66..34028085.64 rows=2376 width=833)
                                       ->  GroupAggregate  (cost=34024485.38..34027325.02 rows=2376 width=860)
                                             Group Key: temp.settlement_date, temp.uin, temp.participant_id, temp.isin, temp.account_number, temp.inv_participant_id, temp.inv_account_number, temp.inventory_date, temp.trans_type, temp.trn_code, temp.reason_code
                                             ->  Sort  (cost=34024485.38..34024544.79 rows=23763 width=804)
                                                   Sort Key: temp.settlement_date, temp.uin, temp.participant_id, temp.isin, temp.account_number, temp.inv_participant_id, temp.inv_account_number, temp.inventory_date, temp.trans_type, temp.trn_code, temp.reason_code
                                                   ->  Subquery Scan on temp  (cost=2313171.12..34022758.23 rows=23763 width=804)
                                                         ->  Append  (cost=2313171.12..34022520.60 rows=23763 width=912)
                                                               ->  Result  (cost=2313171.12..33723548.75 rows=19558 width=912)
                                                                     ->  Append  (cost=2313171.12..33723304.27 rows=19558 width=888)
                                                                           ->  Result  (cost=2313171.12..32966641.79 rows=19540 width=888)
                                                                                 ->  Append  (cost=2313171.12..32966397.54 rows=19540 width=864)
                                                                                       ->  Result  (cost=2313171.12..30881387.68 rows=17748 width=854)
                                                                                             ->  Append  (cost=2313171.12..30881121.46 rows=17748 width=822)
                                                                                                   ->  Result  (cost=2313171.12..16069164.60 rows=17747 width=802)
                                                                                                         ->  Append  (cost=2313171.12..16068676.56 rows=17747 width=662)
                                                                                                               ->  Result  (cost=2313171.12..15930499.65 rows=17738 width=662)
                                                                                                                     ->  Append  (cost=2313171.12..15930233.58 rows=17738 width=630)
                                                                                                                           ->  Nested Loop  (cost=2313171.12..14996333.31 rows=7 width=404)
                                                                                                                                 Join Filter: ((c.participant_id)::text = (ca_3.participant_id)::text)
                                                                                                                                 ->  Hash Join  (cost=2313084.07..14996146.76 rows=1 width=244)
                                                                                                                                       Hash Cond: (("*SELECT* 1".transaction_date = c.settlement_date) AND (("*SELECT* 1".isin)::text = (gl.isin)::text) AND (("*SELECT* 1".uin)::text = (gl.uin)::text) AND (("*SELECT* 1".participant_id)::text = (c.participant_id)::text) AND ("*SELECT* 1".account_number = gl.account_number) AND ("*SELECT* 1".inv_id = gl.inv_id))
                                                                                                                                       ->  Append  (cost=2075676.48..10091161.03 rows=143617789 width=384)
                                                                                                                                             ->  Subquery Scan on "*SELECT* 1"  (cost=2075676.48..4418115.83 rows=71431757 width=207)
                                                                                                                                                   ->  Merge Join  (cost=2075676.48..3525218.87 rows=71431757 width=183)
                                                                                                                                                         Merge Cond: ((x_1.participant_id)::text = ("*SELECT* 1_1".participant_id)::text)
                                                                                                                                                         ->  Sort  (cost=256.63..260.90 rows=1709 width=64)
                                                                                                                                                               Sort Key: x_1.participant_id
                                                                                                                                                               ->  Subquery Scan on x_1  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                                     ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                           ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                                 Group Key: ca.participant_id
                                                                                                                                                                                 ->  Seq Scan on clearing_account ca  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                       Filter: ((NOT (hashed SubPlan 3)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                       SubPlan 3
                                                                                                                                                                                         ->  Seq Scan on cgt_exempted_participants  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_2"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                                 ->  Seq Scan on cgt_non_cm_participants  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 3_1"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                                 ->  Seq Scan on cgt_member  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                                         ->  Materialize  (cost=2075419.85..2117217.25 rows=8359480 width=124)
                                                                                                                                                               ->  Sort  (cost=2075419.85..2096318.55 rows=8359480 width=124)
                                                                                                                                                                     Sort Key: "*SELECT* 1_1".participant_id
                                                                                                                                                                     ->  Append  (cost=194380.92..804073.40 rows=8359480 width=124)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 1_1"  (cost=194380.92..762247.30 rows=8359400 width=124)
                                                                                                                                                                                 ->  Nested Loop  (cost=194380.92..678653.30 rows=8359400 width=148)
                                                                                                                                                                                       ->  Gather  (cost=194380.92..553246.18 rows=17060 width=124)
                                                                                                                                                                                             Workers Planned: 2
                                                                                                                                                                                             ->  Parallel Hash Join  (cost=193380.92..550540.18 rows=7108 width=124)
                                                                                                                                                                                                   Hash Cond: ((b.transaction_date = cs.settlement_date) AND (('NF'::text) = (cs.filer_non_filer)::text) AND ((b.uin)::text = (cs.uin)::text))
                                                                                                                                                                                                   ->  Parallel Append  (cost=0.00..314161.29 rows=5460059 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b  (cost=0.00..286849.59 rows=5459959 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_profit_loss a  (cost=0.00..11.41 rows=141 width=308)
                                                                                                                                                                                                   ->  Parallel Hash  (cost=116639.97..116639.97 rows=4385197 width=23)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_filer_non_filer_status cs  (cost=0.00..116639.97 rows=4385197 width=23)
                                                                                                                                                                                       ->  Materialize  (cost=0.00..17.35 rows=490 width=8)
                                                                                                                                                                                             ->  Seq Scan on cgt_server_param  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_1"  (cost=14.90..28.70 rows=80 width=308)
                                                                                                                                                                                 ->  Seq Scan on cgt_inventory_profit_loss c_1  (cost=14.90..27.90 rows=80 width=332)
                                                                                                                                                                                       Filter: (transaction_date < $1)
                                                                                                                                                                                       InitPlan 2 (returns $1)
                                                                                                                                                                                         ->  Seq Scan on cgt_server_param cgt_server_param_10  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                             ->  Hash Join  (cost=194567.14..4233095.93 rows=72186032 width=384)
                                                                                                                                                   Hash Cond: (("*SELECT* 1_2".participant_id)::text = (x_2.participant_id)::text)
                                                                                                                                                   ->  Append  (cost=194380.92..1238815.56 rows=8447751 width=352)
                                                                                                                                                         ->  Result  (cost=194380.92..1062715.53 rows=8382943 width=332)
                                                                                                                                                               ->  Append  (cost=194380.92..957928.74 rows=8382943 width=308)
                                                                                                                                                                     ->  Append  (cost=194380.92..804073.40 rows=8359480 width=124)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 1_2"  (cost=194380.92..762247.30 rows=8359400 width=124)
                                                                                                                                                                                 ->  Nested Loop  (cost=194380.92..678653.30 rows=8359400 width=148)
                                                                                                                                                                                       ->  Gather  (cost=194380.92..553246.18 rows=17060 width=124)
                                                                                                                                                                                             Workers Planned: 2
                                                                                                                                                                                             ->  Parallel Hash Join  (cost=193380.92..550540.18 rows=7108 width=124)
                                                                                                                                                                                                   Hash Cond: ((b_1.transaction_date = cs_1.settlement_date) AND (('NF'::text) = (cs_1.filer_non_filer)::text) AND ((b_1.uin)::text = (cs_1.uin)::text))
                                                                                                                                                                                                   ->  Parallel Append  (cost=0.00..314161.29 rows=5460059 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b_1  (cost=0.00..286849.59 rows=5459959 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_profit_loss a_1  (cost=0.00..11.41 rows=141 width=308)
                                                                                                                                                                                                   ->  Parallel Hash  (cost=116639.97..116639.97 rows=4385197 width=23)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_filer_non_filer_status cs_1  (cost=0.00..116639.97 rows=4385197 width=23)
                                                                                                                                                                                       ->  Materialize  (cost=0.00..17.35 rows=490 width=8)
                                                                                                                                                                                             ->  Seq Scan on cgt_server_param cgt_server_param_1  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_4"  (cost=14.90..28.70 rows=80 width=308)
                                                                                                                                                                                 ->  Seq Scan on cgt_inventory_profit_loss c_2  (cost=14.90..27.90 rows=80 width=332)
                                                                                                                                                                                       Filter: (transaction_date < $3)
                                                                                                                                                                                       InitPlan 4 (returns $3)
                                                                                                                                                                                         ->  Seq Scan on cgt_server_param cgt_server_param_11  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 2_3"  (cost=1000.56..28345.82 rows=23463 width=148)
                                                                                                                                                                           ->  Result  (cost=1000.56..28052.53 rows=23463 width=120)
                                                                                                                                                                                 ->  Append  (cost=1000.56..27817.90 rows=23463 width=108)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 1_3"  (cost=1000.56..27313.17 rows=16660 width=108)
                                                                                                                                                                                             ->  Nested Loop  (cost=1000.56..27146.57 rows=16660 width=164)
                                                                                                                                                                                                   ->  Seq Scan on cgt_server_param cgt_server_param_2  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                                   ->  Materialize  (cost=1000.56..26881.86 rows=34 width=108)
                                                                                                                                                                                                         ->  Gather  (cost=1000.56..26881.69 rows=34 width=108)
                                                                                                                                                                                                               Workers Planned: 2
                                                                                                                                                                                                               ->  Nested Loop  (cost=0.56..25878.29 rows=14 width=108)
                                                                                                                                                                                                                     ->  Parallel Append  (cost=0.00..642.77 rows=11025 width=108)
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_non_inventory_profit_loss a_2  (cost=0.00..451.05 rows=12005 width=108)
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_non_inventory_pl_non_filer b_2  (cost=0.00..136.59 rows=3559 width=108)
                                                                                                                                                                                                                     ->  Index Scan using cgt_fnf_status_pk on cgt_filer_non_filer_status cs_2  (cost=0.56..2.28 rows=1 width=23)
                                                                                                                                                                                                                           Index Cond: (((uin)::text = (a_2.uin)::text) AND (settlement_date = a_2.transaction_date))
                                                                                                                                                                                                                           Filter: (('F'::text) = (filer_non_filer)::text)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_5"  (cost=15.19..387.42 rows=6803 width=108)
                                                                                                                                                                                             ->  Index Scan using tran_date_index01 on cgt_non_inventory_profit_loss c_3  (cost=15.19..319.39 rows=6803 width=164)
                                                                                                                                                                                                   Index Cond: (transaction_date < $4)
                                                                                                                                                                                                   InitPlan 5 (returns $4)
                                                                                                                                                                                                     ->  Seq Scan on cgt_server_param cgt_server_param_12  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 3_2"  (cost=131430.98..133861.28 rows=64808 width=200)
                                                                                                                                                               ->  HashAggregate  (cost=131430.98..132889.16 rows=64808 width=222)
                                                                                                                                                                     Group Key: ca_1.transaction_date, ca_1.inv_id, ca_1.inventory_date, ca_1.ca_id, ca_1.isin, ca_1.uin, ca_1.account_number, fnf.filer_non_filer
                                                                                                                                                                     ->  Nested Loop Left Join  (cost=0.56..129324.72 rows=64808 width=82)
                                                                                                                                                                           ->  Seq Scan on cgt_ca_profit_loss_detail ca_1  (cost=0.00..1618.08 rows=64808 width=80)
                                                                                                                                                                           ->  Index Scan using cgt_fnf_status_pk on cgt_filer_non_filer_status fnf  (cost=0.56..1.97 rows=1 width=23)
                                                                                                                                                                                 Index Cond: (((uin)::text = (ca_1.uin)::text) AND (settlement_date = ca_1.transaction_date))
                                                                                                                                                   ->  Hash  (cost=164.86..164.86 rows=1709 width=64)
                                                                                                                                                         ->  Subquery Scan on x_2  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                               ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                     ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                           Group Key: ca_2.participant_id
                                                                                                                                                                           ->  Seq Scan on clearing_account ca_2  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                 Filter: ((NOT (hashed SubPlan 6)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                 SubPlan 6
                                                                                                                                                                                   ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_1  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 2_6"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                           ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_1  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 3_3"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                           ->  Seq Scan on cgt_member cgt_member_1  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                       ->  Hash  (cost=237407.56..237407.56 rows=1 width=158)
                                                                                                                                             ->  Gather  (cost=1000.56..237407.56 rows=1 width=158)
                                                                                                                                                   Workers Planned: 2
                                                                                                                                                   ->  Nested Loop  (cost=0.56..236407.46 rows=1 width=158)
                                                                                                                                                         ->  Parallel Seq Scan on cgt_account_sale c  (cost=0.00..236158.34 rows=96 width=74)
                                                                                                                                                               Filter: ((to_char(settlement_date, 'MON'::text) = 'JAN'::text) AND (to_char(settlement_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                         ->  Index Scan using gfir_indx11 on cgt_global_fifo_inv_relation gl  (cost=0.56..2.58 rows=1 width=100)
                                                                                                                                                               Index Cond: ((all_type_out_id = c.market_tran_id) AND (transaction_date = c.settlement_date) AND ((participant_id)::text = (c.participant_id)::text) AND ((outgoing_type)::text = 'M'::text))
                                                                                                                                 ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                       ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                             Group Key: ca_3.participant_id
                                                                                                                                             ->  Seq Scan on clearing_account ca_3  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                   Filter: ((NOT (hashed SubPlan 7)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                   SubPlan 7
                                                                                                                                                     ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_2  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_7"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                             ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_2  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                       ->  Subquery Scan on "*SELECT* 3_4"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                             ->  Seq Scan on cgt_member cgt_member_2  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                           ->  Subquery Scan on "*SELECT* 2"  (cost=30732.36..933811.51 rows=17731 width=556)
                                                                                                                                 ->  Hash Join  (cost=30732.36..933501.22 rows=17731 width=472)
                                                                                                                                       Hash Cond: (("*SELECT* 1_4".participant_id)::text = (x_3.participant_id)::text)
                                                                                                                                       ->  Nested Loop  (cost=30546.13..932201.36 rows=2075 width=326)
                                                                                                                                             Join Filter: (("*SELECT* 1_4".uin)::text = (cgt_eligible_uin_all_1.uin)::text)
                                                                                                                                             ->  Nested Loop  (cost=1187.62..696021.32 rows=1 width=339)
                                                                                                                                                   Join Filter: ((gl_1.isin)::text = (s_1.isin)::text)
                                                                                                                                                   ->  Nested Loop  (cost=1187.35..696021.01 rows=1 width=352)
                                                                                                                                                         Join Filter: ((gl_1.inventory_date = "*SELECT* 1_4".inventory_date) AND (gl_1.transaction_date = "*SELECT* 1_4".transaction_date) AND ((gl_1.uin)::text = ("*SELECT* 1_4".uin)::text) AND ((gl_1.participant_id)::text = ("*SELECT* 1_4".participant_id)::text) AND ((gl_1.isin)::text = ("*SELECT* 1_4".isin)::text) AND (gl_1.account_number = "*SELECT* 1_4".account_number) AND (gl_1.inv_id = "*SELECT* 1_4".inv_id))
                                                                                                                                                         ->  Index Scan using gfir_indx08 on cgt_global_fifo_inv_relation gl_1  (cost=0.56..5008.28 rows=1 width=92)
                                                                                                                                                               Index Cond: ((all_type_out_id IS NULL) AND ((profit_loss_tag)::text = 'Y'::text))
                                                                                                                                                               Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                         ->  Append  (cost=1186.79..690540.08 rows=12604 width=384)
                                                                                                                                                               ->  Subquery Scan on "*SELECT* 1_4"  (cost=1186.79..343287.04 rows=4196 width=207)
                                                                                                                                                                     ->  Hash Join  (cost=1186.79..343234.59 rows=4196 width=183)
                                                                                                                                                                           Hash Cond: (("*SELECT* 1_5".participant_id)::text = (x_4.participant_id)::text)
                                                                                                                                                                           ->  Append  (cost=1000.56..342879.24 rows=491 width=124)
                                                                                                                                                                                 ->  Subquery Scan on "*SELECT* 1_5"  (cost=1000.56..342846.48 rows=490 width=124)
                                                                                                                                                                                       ->  Nested Loop  (cost=1000.56..342841.58 rows=490 width=148)
                                                                                                                                                                                             ->  Gather  (cost=1000.56..342820.55 rows=1 width=124)
                                                                                                                                                                                                   Workers Planned: 2
                                                                                                                                                                                                   ->  Nested Loop  (cost=0.56..341820.45 rows=1 width=124)
                                                                                                                                                                                                         ->  Parallel Append  (cost=0.00..341462.69 rows=138 width=125)
                                                                                                                                                                                                               ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b_3  (cost=0.00..341449.18 rows=137 width=124)
                                                                                                                                                                                                                     Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                               ->  Parallel Seq Scan on cgt_inventory_profit_loss a_3  (cost=0.00..12.82 rows=1 width=308)
                                                                                                                                                                                                                     Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                         ->  Index Scan using cgt_filer_indx03 on cgt_filer_non_filer_status cs_3  (cost=0.56..2.58 rows=1 width=23)
                                                                                                                                                                                                               Index Cond: ((settlement_date = b_3.transaction_date) AND ((uin)::text = (b_3.uin)::text))
                                                                                                                                                                                                               Filter: (('NF'::text) = (filer_non_filer)::text)
                                                                                                                                                                                             ->  Seq Scan on cgt_server_param cgt_server_param_3  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                 ->  Subquery Scan on "*SELECT* 2_8"  (cost=14.90..30.31 rows=1 width=308)
                                                                                                                                                                                       ->  Seq Scan on cgt_inventory_profit_loss c_4  (cost=14.90..30.30 rows=1 width=332)
                                                                                                                                                                                             Filter: ((transaction_date < $8) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                             InitPlan 9 (returns $8)
                                                                                                                                                                                               ->  Seq Scan on cgt_server_param cgt_server_param_13  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Hash  (cost=164.86..164.86 rows=1709 width=64)
                                                                                                                                                                                 ->  Subquery Scan on x_4  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                                                       ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                                             ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                                                   Group Key: ca_4.participant_id
                                                                                                                                                                                                   ->  Seq Scan on clearing_account ca_4  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                                         Filter: ((NOT (hashed SubPlan 10)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                                         SubPlan 10
                                                                                                                                                                                                           ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_3  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                                             ->  Subquery Scan on "*SELECT* 2_9"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                                                   ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_3  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                                             ->  Subquery Scan on "*SELECT* 3_5"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                                                   ->  Seq Scan on cgt_member cgt_member_3  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                                               ->  Hash Join  (cost=1186.79..347105.94 rows=8408 width=384)
                                                                                                                                                                     Hash Cond: (("*SELECT* 1_6".participant_id)::text = (x_5.participant_id)::text)
                                                                                                                                                                     ->  Append  (cost=1000.56..346570.96 rows=984 width=352)
                                                                                                                                                                           ->  Result  (cost=1000.56..344294.57 rows=982 width=332)
                                                                                                                                                                                 ->  Append  (cost=1000.56..344282.29 rows=982 width=308)
                                                                                                                                                                                       ->  Append  (cost=1000.56..342879.24 rows=491 width=124)
                                                                                                                                                                                             ->  Subquery Scan on "*SELECT* 1_6"  (cost=1000.56..342846.48 rows=490 width=124)
                                                                                                                                                                                                   ->  Nested Loop  (cost=1000.56..342841.58 rows=490 width=148)
                                                                                                                                                                                                         ->  Gather  (cost=1000.56..342820.55 rows=1 width=124)
                                                                                                                                                                                                               Workers Planned: 2
                                                                                                                                                                                                               ->  Nested Loop  (cost=0.56..341820.45 rows=1 width=124)
                                                                                                                                                                                                                     ->  Parallel Append  (cost=0.00..341462.69 rows=138 width=125)
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b_4  (cost=0.00..341449.18 rows=137 width=124)
                                                                                                                                                                                                                                 Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_inventory_profit_loss a_4  (cost=0.00..12.82 rows=1 width=308)
                                                                                                                                                                                                                                 Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                                     ->  Index Scan using cgt_filer_indx03 on cgt_filer_non_filer_status cs_4  (cost=0.56..2.58 rows=1 width=23)
                                                                                                                                                                                                                           Index Cond: ((settlement_date = b_4.transaction_date) AND ((uin)::text = (b_4.uin)::text))
                                                                                                                                                                                                                           Filter: (('NF'::text) = (filer_non_filer)::text)
                                                                                                                                                                                                         ->  Seq Scan on cgt_server_param cgt_server_param_4  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                             ->  Subquery Scan on "*SELECT* 2_11"  (cost=14.90..30.31 rows=1 width=308)
                                                                                                                                                                                                   ->  Seq Scan on cgt_inventory_profit_loss c_5  (cost=14.90..30.30 rows=1 width=332)
                                                                                                                                                                                                         Filter: ((transaction_date < $10) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                         InitPlan 11 (returns $10)
                                                                                                                                                                                                           ->  Seq Scan on cgt_server_param cgt_server_param_14  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_10"  (cost=0.56..1393.23 rows=491 width=148)
                                                                                                                                                                                             ->  Result  (cost=0.56..1387.09 rows=491 width=120)
                                                                                                                                                                                                   ->  Append  (cost=0.56..1382.18 rows=491 width=108)
                                                                                                                                                                                                         ->  Subquery Scan on "*SELECT* 1_7"  (cost=0.56..992.30 rows=490 width=108)
                                                                                                                                                                                                               ->  Nested Loop  (cost=0.56..987.40 rows=490 width=164)
                                                                                                                                                                                                                     ->  Nested Loop  (cost=0.56..966.38 rows=1 width=108)
                                                                                                                                                                                                                           ->  Append  (cost=0.00..961.19 rows=2 width=108)
                                                                                                                                                                                                                                 ->  Seq Scan on cgt_non_inventory_profit_loss a_5  (cost=0.00..739.18 rows=1 width=108)
                                                                                                                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                                                 ->  Seq Scan on cgt_non_inventory_pl_non_filer b_5  (cost=0.00..222.00 rows=1 width=108)
                                                                                                                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                                           ->  Index Scan using cgt_filer_indx03 on cgt_filer_non_filer_status cs_5  (cost=0.56..2.58 rows=1 width=23)
                                                                                                                                                                                                                                 Index Cond: ((settlement_date = a_5.transaction_date) AND ((uin)::text = (a_5.uin)::text))
                                                                                                                                                                                                                                 Filter: (('F'::text) = (filer_non_filer)::text)
                                                                                                                                                                                                                     ->  Seq Scan on cgt_server_param cgt_server_param_5  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                                         ->  Subquery Scan on "*SELECT* 2_12"  (cost=15.19..387.43 rows=1 width=108)
                                                                                                                                                                                                               ->  Index Scan using tran_date_index01 on cgt_non_inventory_profit_loss c_6  (cost=15.19..387.42 rows=1 width=164)
                                                                                                                                                                                                                     Index Cond: (transaction_date < $11)
                                                                                                                                                                                                                     Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                                     InitPlan 12 (returns $11)
                                                                                                                                                                                                                       ->  Seq Scan on cgt_server_param cgt_server_param_15  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 3_6"  (cost=2271.33..2271.48 rows=2 width=200)
                                                                                                                                                                                 ->  GroupAggregate  (cost=2271.33..2271.45 rows=2 width=222)
                                                                                                                                                                                       Group Key: ca_5.transaction_date, ca_5.inv_id, ca_5.inventory_date, ca_5.ca_id, ca_5.isin, ca_5.uin, ca_5.account_number, fnf_1.filer_non_filer
                                                                                                                                                                                       ->  Sort  (cost=2271.33..2271.34 rows=2 width=82)
                                                                                                                                                                                             Sort Key: ca_5.transaction_date, ca_5.inv_id, ca_5.inventory_date, ca_5.ca_id, ca_5.isin, ca_5.uin, ca_5.account_number, fnf_1.filer_non_filer
                                                                                                                                                                                             ->  Nested Loop Left Join  (cost=0.56..2271.32 rows=2 width=82)
                                                                                                                                                                                                   ->  Seq Scan on cgt_ca_profit_loss_detail ca_5  (cost=0.00..2266.16 rows=2 width=80)
                                                                                                                                                                                                         Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                                   ->  Index Scan using cgt_filer_indx03 on cgt_filer_non_filer_status fnf_1  (cost=0.56..2.58 rows=1 width=23)
                                                                                                                                                                                                         Index Cond: ((settlement_date = ca_5.transaction_date) AND ((uin)::text = (ca_5.uin)::text))
                                                                                                                                                                     ->  Hash  (cost=164.86..164.86 rows=1709 width=64)
                                                                                                                                                                           ->  Subquery Scan on x_5  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                                                 ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                                       ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                                             Group Key: ca_6.participant_id
                                                                                                                                                                                             ->  Seq Scan on clearing_account ca_6  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                                   Filter: ((NOT (hashed SubPlan 13)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                                   SubPlan 13
                                                                                                                                                                                                     ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_4  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_13"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                                             ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_4  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 3_7"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                                             ->  Seq Scan on cgt_member cgt_member_4  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                                   ->  Index Only Scan using pk_security1 on security s_1  (cost=0.28..0.30 rows=1 width=12)
                                                                                                                                                         Index Cond: (isin = ("*SELECT* 1_4".isin)::text)
                                                                                                                                             ->  Subquery Scan on cgt_eligible_uin_all_1  (cost=29358.51..230993.47 rows=414926 width=32)
                                                                                                                                                   Filter: (NOT (hashed SubPlan 8))
                                                                                                                                                   ->  Append  (cost=29336.21..220598.03 rows=829851 width=96)
                                                                                                                                                         ->  Hash Right Join  (cost=29336.21..39349.96 rows=595787 width=64)
                                                                                                                                                               Hash Cond: ((fi.uin)::text = (cu.uin)::text)
                                                                                                                                                               ->  Foreign Scan on cgt_corporateforeigner_npo_uin fi  (cost=10000.00..20000.00 rows=1000 width=84)
                                                                                                                                                                     Oracle query: SELECT /*7adc3c5bb37743da924fd48f44a2ac42*/ r2."UIN", r2."UIN_TYPE" FROM "NCSSLIVE"."CGT_CORPORATEFOREIGNER_NPO_UIN" r2
                                                                                                                                                               ->  Hash  (cost=11888.87..11888.87 rows=595787 width=32)
                                                                                                                                                                     ->  Seq Scan on cgt_eligible_uin cu  (cost=0.00..11888.87 rows=595787 width=32)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 2_14"  (cost=69038.78..100947.22 rows=222800 width=62)
                                                                                                                                                               ->  Merge Anti Join  (cost=69038.78..98719.22 rows=222800 width=62)
                                                                                                                                                                     Merge Cond: ((mufap_amc_uins.uin)::text = (cgt_eligible_uin.uin)::text)
                                                                                                                                                                     ->  Index Scan using mufap_amc_uins_pk on mufap_amc_uins  (cost=0.42..12537.42 rows=445600 width=30)
                                                                                                                                                                     ->  Merge Append  (cost=69038.36..77338.87 rows=618314 width=13)
                                                                                                                                                                           Sort Key: cgt_eligible_uin.uin
                                                                                                                                                                           ->  Sort  (cost=69038.06..70527.53 rows=595787 width=13)
                                                                                                                                                                                 Sort Key: cgt_eligible_uin.uin
                                                                                                                                                                                 ->  Seq Scan on cgt_eligible_uin  (cost=0.00..11888.87 rows=595787 width=13)
                                                                                                                                                                           ->  Index Only Scan using pmexuin_indx01 on pmex_uin pu  (cost=0.29..628.19 rows=22527 width=13)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 3_8"  (cost=38125.14..70193.73 rows=11264 width=61)
                                                                                                                                                               ->  Hash Anti Join  (cost=38125.14..70081.09 rows=11264 width=61)
                                                                                                                                                                     Hash Cond: ((pu_1.uin)::text = (cgt_eligible_uin_1.uin)::text)
                                                                                                                                                                     ->  Seq Scan on pmex_uin pu_1  (cost=0.00..401.27 rows=22527 width=29)
                                                                                                                                                                     ->  Hash  (cost=25107.81..25107.81 rows=1041387 width=13)
                                                                                                                                                                           ->  Append  (cost=0.00..25107.81 rows=1041387 width=13)
                                                                                                                                                                                 ->  Seq Scan on cgt_eligible_uin cgt_eligible_uin_1  (cost=0.00..11888.87 rows=595787 width=13)
                                                                                                                                                                                 ->  Seq Scan on mufap_amc_uins mufap_amc_uins_1  (cost=0.00..8012.00 rows=445600 width=13)
                                                                                                                                                   SubPlan 8
                                                                                                                                                     ->  Seq Scan on cgt_ipo_uin cgt_ipo_uin_1  (cost=0.00..19.84 rows=984 width=20)
                                                                                                                                       ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                                                                             ->  Subquery Scan on x_3  (cost=87.05..164.86 rows=1709 width=32)
                                                                                                                                                   ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                         ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                               Group Key: ca_7.participant_id
                                                                                                                                                               ->  Seq Scan on clearing_account ca_7  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                     Filter: ((NOT (hashed SubPlan 14)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                     SubPlan 14
                                                                                                                                                                       ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_5  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 2_15"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                               ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_5  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 3_9"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                               ->  Seq Scan on cgt_member cgt_member_5  (cost=0.00..25.31 rows=931 width=54)
                                                                                                               ->  Subquery Scan on "*SELECT* 3"  (cost=43258.03..138088.17 rows=9 width=462)
                                                                                                                     ->  Hash Join  (cost=43258.03..138087.88 rows=9 width=230)
                                                                                                                           Hash Cond: ((t.participant_id)::text = (x_6.participant_id)::text)
                                                                                                                           ->  Nested Loop  (cost=43071.80..137901.08 rows=2 width=104)
                                                                                                                                 Join Filter: ((gl_2.isin)::text = (s_2.isin)::text)
                                                                                                                                 ->  Merge Join  (cost=43071.52..137882.98 rows=10 width=117)
                                                                                                                                       Merge Cond: ((gl_2.all_type_out_id = t.ncc_trn_id) AND (gl_2.all_type_out_det_id = t.acc_out_id))
                                                                                                                                       Join Filter: ((gl_2.transaction_date = t.transaction_date) AND ((cgt_eligible_uin_all_2.uin)::text = (t.uin)::text) AND ((gl_2.participant_id)::text = (t.participant_id)::text) AND ((gl_2.isin)::text = (t.isin)::text) AND (gl_2.account_number = t.account_number))
                                                                                                                                       ->  Nested Loop  (cost=30358.97..871809.73 rows=71 width=130)
                                                                                                                                             Join Filter: ((gl_2.uin)::text = (cgt_eligible_uin_all_2.uin)::text)
                                                                                                                                             ->  Gather Merge  (cost=1000.46..608659.50 rows=5 width=98)
                                                                                                                                                   Workers Planned: 2
                                                                                                                                                   ->  Parallel Index Scan using gfir_indx01 on cgt_global_fifo_inv_relation gl_2  (cost=0.43..607658.90 rows=2 width=98)
                                                                                                                                                         Filter: (((profit_loss_tag)::text = 'Y'::text) AND (inv_price = '0'::numeric) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                             ->  Materialize  (cost=29358.51..233068.10 rows=414926 width=32)
                                                                                                                                                   ->  Subquery Scan on cgt_eligible_uin_all_2  (cost=29358.51..230993.47 rows=414926 width=32)
                                                                                                                                                         Filter: (NOT (hashed SubPlan 15))
                                                                                                                                                         ->  Append  (cost=29336.21..220598.03 rows=829851 width=96)
                                                                                                                                                               ->  Hash Right Join  (cost=29336.21..39349.96 rows=595787 width=64)
                                                                                                                                                                     Hash Cond: ((fi_1.uin)::text = (cu_1.uin)::text)
                                                                                                                                                                     ->  Foreign Scan on cgt_corporateforeigner_npo_uin fi_1  (cost=10000.00..20000.00 rows=1000 width=84)
                                                                                                                                                                           Oracle query: SELECT /*7adc3c5bb37743da924fd48f44a2ac42*/ r2."UIN", r2."UIN_TYPE" FROM "NCSSLIVE"."CGT_CORPORATEFOREIGNER_NPO_UIN" r2
                                                                                                                                                                     ->  Hash  (cost=11888.87..11888.87 rows=595787 width=32)
                                                                                                                                                                           ->  Seq Scan on cgt_eligible_uin cu_1  (cost=0.00..11888.87 rows=595787 width=32)
                                                                                                                                                               ->  Subquery Scan on "*SELECT* 2_16"  (cost=69038.78..100947.22 rows=222800 width=62)
                                                                                                                                                                     ->  Merge Anti Join  (cost=69038.78..98719.22 rows=222800 width=62)
                                                                                                                                                                           Merge Cond: ((mufap_amc_uins_2.uin)::text = (cgt_eligible_uin_2.uin)::text)
                                                                                                                                                                           ->  Index Scan using mufap_amc_uins_pk on mufap_amc_uins mufap_amc_uins_2  (cost=0.42..12537.42 rows=445600 width=30)
                                                                                                                                                                           ->  Merge Append  (cost=69038.36..77338.87 rows=618314 width=13)
                                                                                                                                                                                 Sort Key: cgt_eligible_uin_2.uin
                                                                                                                                                                                 ->  Sort  (cost=69038.06..70527.53 rows=595787 width=13)
                                                                                                                                                                                       Sort Key: cgt_eligible_uin_2.uin
                                                                                                                                                                                       ->  Seq Scan on cgt_eligible_uin cgt_eligible_uin_2  (cost=0.00..11888.87 rows=595787 width=13)
                                                                                                                                                                                 ->  Index Only Scan using pmexuin_indx01 on pmex_uin pu_2  (cost=0.29..628.19 rows=22527 width=13)
                                                                                                                                                               ->  Subquery Scan on "*SELECT* 3_10"  (cost=38125.14..70193.73 rows=11264 width=61)
                                                                                                                                                                     ->  Hash Anti Join  (cost=38125.14..70081.09 rows=11264 width=61)
                                                                                                                                                                           Hash Cond: ((pu_3.uin)::text = (cgt_eligible_uin_3.uin)::text)
                                                                                                                                                                           ->  Seq Scan on pmex_uin pu_3  (cost=0.00..401.27 rows=22527 width=29)
                                                                                                                                                                           ->  Hash  (cost=25107.81..25107.81 rows=1041387 width=13)
                                                                                                                                                                                 ->  Append  (cost=0.00..25107.81 rows=1041387 width=13)
                                                                                                                                                                                       ->  Seq Scan on cgt_eligible_uin cgt_eligible_uin_3  (cost=0.00..11888.87 rows=595787 width=13)
                                                                                                                                                                                       ->  Seq Scan on mufap_amc_uins mufap_amc_uins_3  (cost=0.00..8012.00 rows=445600 width=13)
                                                                                                                                                         SubPlan 15
                                                                                                                                                           ->  Seq Scan on cgt_ipo_uin cgt_ipo_uin_2  (cost=0.00..19.84 rows=984 width=20)
                                                                                                                                       ->  Sort  (cost=12712.52..12712.55 rows=10 width=70)
                                                                                                                                             Sort Key: t.ncc_trn_id, t.acc_out_id
                                                                                                                                             ->  Gather  (cost=1000.00..12712.35 rows=10 width=70)
                                                                                                                                                   Workers Planned: 2
                                                                                                                                                   ->  Parallel Seq Scan on cgt_corporateaction_outgoing t  (cost=0.00..11711.35 rows=4 width=70)
                                                                                                                                                         Filter: (((trn_code)::text = 'E060'::text) AND ((opr_code)::text = 'DLST'::text) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Index Scan using pk_security1 on security s_2  (cost=0.28..1.80 rows=1 width=12)
                                                                                                                                       Index Cond: ((isin)::text = (t.isin)::text)
                                                                                                                                       Filter: ((sec_type_id)::text = '3'::text)
                                                                                                                           ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                                                                 ->  Subquery Scan on x_6  (cost=87.05..164.86 rows=1709 width=32)
                                                                                                                                       ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                             ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                   Group Key: ca_8.participant_id
                                                                                                                                                   ->  Seq Scan on clearing_account ca_8  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                         Filter: ((NOT (hashed SubPlan 16)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                         SubPlan 16
                                                                                                                                                           ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_6  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                             ->  Subquery Scan on "*SELECT* 2_17"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                   ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_6  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                             ->  Subquery Scan on "*SELECT* 3_11"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                   ->  Seq Scan on cgt_member cgt_member_6  (cost=0.00..25.31 rows=931 width=54)
                                                                                                   ->  Subquery Scan on "*SELECT* 4"  (cost=14811867.57..14811868.13 rows=1 width=654)
                                                                                                         ->  Subquery Scan on sub1  (cost=14811867.57..14811868.09 rows=1 width=423)
                                                                                                               ->  GroupAggregate  (cost=14811867.57..14811868.06 rows=1 width=423)
                                                                                                                     Group Key: oug.settlement_date, oug.uin, oug.participant_id, oug.isin, oug.account_number, oug.cgt_taxiable_qty, oug.tax_outgoing_value, oug.inv_participant_id, oug.inv_account_number, oug.inv_outgoing_qty, oug.inv_price, oug.inventory_date, oug.inv_avg_price, oug.trn_code, oug.tax_reason
                                                                                                                     ->  Sort  (cost=14811867.57..14811867.59 rows=9 width=343)
                                                                                                                           Sort Key: oug.settlement_date, oug.uin, oug.participant_id, oug.isin, oug.account_number, oug.cgt_taxiable_qty, oug.tax_outgoing_value, oug.inv_participant_id, oug.inv_account_number, oug.inv_outgoing_qty, oug.inv_price, oug.inventory_date, oug.inv_avg_price, oug.trn_code, oug.tax_reason
                                                                                                                           ->  Nested Loop  (cost=2128705.55..14811867.42 rows=9 width=343)
                                                                                                                                 Join Filter: ((oug.participant_id)::text = (ca_12.participant_id)::text)
                                                                                                                                 ->  Hash Join  (cost=2128618.50..14811681.20 rows=1 width=367)
                                                                                                                                       Hash Cond: ((("*SELECT* 1_8".isin)::text = (oug.isin)::text) AND (("*SELECT* 1_8".uin)::text = (oug.uin)::text) AND (("*SELECT* 1_8".participant_id)::text = (oug.participant_id)::text) AND ("*SELECT* 1_8".account_number = oug.account_number) AND ("*SELECT* 1_8".transaction_date = oug.transaction_date) AND ("*SELECT* 1_8".inv_id = oug.inv_id))
                                                                                                                                       ->  Append  (cost=2075676.48..10091161.03 rows=143617789 width=384)
                                                                                                                                             ->  Subquery Scan on "*SELECT* 1_8"  (cost=2075676.48..4418115.83 rows=71431757 width=207)
                                                                                                                                                   ->  Merge Join  (cost=2075676.48..3525218.87 rows=71431757 width=183)
                                                                                                                                                         Merge Cond: ((x_7.participant_id)::text = ("*SELECT* 1_9".participant_id)::text)
                                                                                                                                                         ->  Sort  (cost=256.63..260.90 rows=1709 width=64)
                                                                                                                                                               Sort Key: x_7.participant_id
                                                                                                                                                               ->  Subquery Scan on x_7  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                                     ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                           ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                                 Group Key: ca_9.participant_id
                                                                                                                                                                                 ->  Seq Scan on clearing_account ca_9  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                       Filter: ((NOT (hashed SubPlan 18)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                       SubPlan 18
                                                                                                                                                                                         ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_7  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_19"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                                 ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_7  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 3_12"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                                 ->  Seq Scan on cgt_member cgt_member_7  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                                         ->  Materialize  (cost=2075419.85..2117217.25 rows=8359480 width=124)
                                                                                                                                                               ->  Sort  (cost=2075419.85..2096318.55 rows=8359480 width=124)
                                                                                                                                                                     Sort Key: "*SELECT* 1_9".participant_id
                                                                                                                                                                     ->  Append  (cost=194380.92..804073.40 rows=8359480 width=124)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 1_9"  (cost=194380.92..762247.30 rows=8359400 width=124)
                                                                                                                                                                                 ->  Nested Loop  (cost=194380.92..678653.30 rows=8359400 width=148)
                                                                                                                                                                                       ->  Gather  (cost=194380.92..553246.18 rows=17060 width=124)
                                                                                                                                                                                             Workers Planned: 2
                                                                                                                                                                                             ->  Parallel Hash Join  (cost=193380.92..550540.18 rows=7108 width=124)
                                                                                                                                                                                                   Hash Cond: ((b_6.transaction_date = cs_6.settlement_date) AND (('NF'::text) = (cs_6.filer_non_filer)::text) AND ((b_6.uin)::text = (cs_6.uin)::text))
                                                                                                                                                                                                   ->  Parallel Append  (cost=0.00..314161.29 rows=5460059 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b_6  (cost=0.00..286849.59 rows=5459959 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_profit_loss a_6  (cost=0.00..11.41 rows=141 width=308)
                                                                                                                                                                                                   ->  Parallel Hash  (cost=116639.97..116639.97 rows=4385197 width=23)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_filer_non_filer_status cs_6  (cost=0.00..116639.97 rows=4385197 width=23)
                                                                                                                                                                                       ->  Materialize  (cost=0.00..17.35 rows=490 width=8)
                                                                                                                                                                                             ->  Seq Scan on cgt_server_param cgt_server_param_6  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_18"  (cost=14.90..28.70 rows=80 width=308)
                                                                                                                                                                                 ->  Seq Scan on cgt_inventory_profit_loss c_7  (cost=14.90..27.90 rows=80 width=332)
                                                                                                                                                                                       Filter: (transaction_date < $16)
                                                                                                                                                                                       InitPlan 17 (returns $16)
                                                                                                                                                                                         ->  Seq Scan on cgt_server_param cgt_server_param_16  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                             ->  Hash Join  (cost=194567.14..4233095.93 rows=72186032 width=384)
                                                                                                                                                   Hash Cond: (("*SELECT* 1_10".participant_id)::text = (x_8.participant_id)::text)
                                                                                                                                                   ->  Append  (cost=194380.92..1238815.56 rows=8447751 width=352)
                                                                                                                                                         ->  Result  (cost=194380.92..1062715.53 rows=8382943 width=332)
                                                                                                                                                               ->  Append  (cost=194380.92..957928.74 rows=8382943 width=308)
                                                                                                                                                                     ->  Append  (cost=194380.92..804073.40 rows=8359480 width=124)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 1_10"  (cost=194380.92..762247.30 rows=8359400 width=124)
                                                                                                                                                                                 ->  Nested Loop  (cost=194380.92..678653.30 rows=8359400 width=148)
                                                                                                                                                                                       ->  Gather  (cost=194380.92..553246.18 rows=17060 width=124)
                                                                                                                                                                                             Workers Planned: 2
                                                                                                                                                                                             ->  Parallel Hash Join  (cost=193380.92..550540.18 rows=7108 width=124)
                                                                                                                                                                                                   Hash Cond: ((b_7.transaction_date = cs_7.settlement_date) AND (('NF'::text) = (cs_7.filer_non_filer)::text) AND ((b_7.uin)::text = (cs_7.uin)::text))
                                                                                                                                                                                                   ->  Parallel Append  (cost=0.00..314161.29 rows=5460059 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_pl_non_filer b_7  (cost=0.00..286849.59 rows=5459959 width=124)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_inventory_profit_loss a_7  (cost=0.00..11.41 rows=141 width=308)
                                                                                                                                                                                                   ->  Parallel Hash  (cost=116639.97..116639.97 rows=4385197 width=23)
                                                                                                                                                                                                         ->  Parallel Seq Scan on cgt_filer_non_filer_status cs_7  (cost=0.00..116639.97 rows=4385197 width=23)
                                                                                                                                                                                       ->  Materialize  (cost=0.00..17.35 rows=490 width=8)
                                                                                                                                                                                             ->  Seq Scan on cgt_server_param cgt_server_param_7  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                           ->  Subquery Scan on "*SELECT* 2_21"  (cost=14.90..28.70 rows=80 width=308)
                                                                                                                                                                                 ->  Seq Scan on cgt_inventory_profit_loss c_8  (cost=14.90..27.90 rows=80 width=332)
                                                                                                                                                                                       Filter: (transaction_date < $18)
                                                                                                                                                                                       InitPlan 19 (returns $18)
                                                                                                                                                                                         ->  Seq Scan on cgt_server_param cgt_server_param_17  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 2_20"  (cost=1000.56..28345.82 rows=23463 width=148)
                                                                                                                                                                           ->  Result  (cost=1000.56..28052.53 rows=23463 width=120)
                                                                                                                                                                                 ->  Append  (cost=1000.56..27817.90 rows=23463 width=108)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 1_11"  (cost=1000.56..27313.17 rows=16660 width=108)
                                                                                                                                                                                             ->  Nested Loop  (cost=1000.56..27146.57 rows=16660 width=164)
                                                                                                                                                                                                   ->  Seq Scan on cgt_server_param cgt_server_param_8  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                                                                   ->  Materialize  (cost=1000.56..26881.86 rows=34 width=108)
                                                                                                                                                                                                         ->  Gather  (cost=1000.56..26881.69 rows=34 width=108)
                                                                                                                                                                                                               Workers Planned: 2
                                                                                                                                                                                                               ->  Nested Loop  (cost=0.56..25878.29 rows=14 width=108)
                                                                                                                                                                                                                     ->  Parallel Append  (cost=0.00..642.77 rows=11025 width=108)
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_non_inventory_profit_loss a_8  (cost=0.00..451.05 rows=12005 width=108)
                                                                                                                                                                                                                           ->  Parallel Seq Scan on cgt_non_inventory_pl_non_filer b_8  (cost=0.00..136.59 rows=3559 width=108)
                                                                                                                                                                                                                     ->  Index Scan using cgt_fnf_status_pk on cgt_filer_non_filer_status cs_8  (cost=0.56..2.28 rows=1 width=23)
                                                                                                                                                                                                                           Index Cond: (((uin)::text = (a_8.uin)::text) AND (settlement_date = a_8.transaction_date))
                                                                                                                                                                                                                           Filter: (('F'::text) = (filer_non_filer)::text)
                                                                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_22"  (cost=15.19..387.42 rows=6803 width=108)
                                                                                                                                                                                             ->  Index Scan using tran_date_index01 on cgt_non_inventory_profit_loss c_9  (cost=15.19..319.39 rows=6803 width=164)
                                                                                                                                                                                                   Index Cond: (transaction_date < $19)
                                                                                                                                                                                                   InitPlan 20 (returns $19)
                                                                                                                                                                                                     ->  Seq Scan on cgt_server_param cgt_server_param_18  (cost=0.00..14.90 rows=490 width=8)
                                                                                                                                                         ->  Subquery Scan on "*SELECT* 3_13"  (cost=131430.98..133861.28 rows=64808 width=200)
                                                                                                                                                               ->  HashAggregate  (cost=131430.98..132889.16 rows=64808 width=222)
                                                                                                                                                                     Group Key: ca_10.transaction_date, ca_10.inv_id, ca_10.inventory_date, ca_10.ca_id, ca_10.isin, ca_10.uin, ca_10.account_number, fnf_2.filer_non_filer
                                                                                                                                                                     ->  Nested Loop Left Join  (cost=0.56..129324.72 rows=64808 width=82)
                                                                                                                                                                           ->  Seq Scan on cgt_ca_profit_loss_detail ca_10  (cost=0.00..1618.08 rows=64808 width=80)
                                                                                                                                                                           ->  Index Scan using cgt_fnf_status_pk on cgt_filer_non_filer_status fnf_2  (cost=0.56..1.97 rows=1 width=23)
                                                                                                                                                                                 Index Cond: (((uin)::text = (ca_10.uin)::text) AND (settlement_date = ca_10.transaction_date))
                                                                                                                                                   ->  Hash  (cost=164.86..164.86 rows=1709 width=64)
                                                                                                                                                         ->  Subquery Scan on x_8  (cost=87.05..164.86 rows=1709 width=64)
                                                                                                                                                               ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                                                     ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                                                           Group Key: ca_11.participant_id
                                                                                                                                                                           ->  Seq Scan on clearing_account ca_11  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                                                 Filter: ((NOT (hashed SubPlan 21)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                                                 SubPlan 21
                                                                                                                                                                                   ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_8  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 2_23"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                                                           ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_8  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                                                     ->  Subquery Scan on "*SELECT* 3_14"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                                                           ->  Seq Scan on cgt_member cgt_member_8  (cost=0.00..25.31 rows=931 width=54)
                                                                                                                                       ->  Hash  (cost=52941.99..52941.99 rows=1 width=249)
                                                                                                                                             ->  Subquery Scan on oug  (cost=52941.91..52941.99 rows=1 width=249)
                                                                                                                                                   ->  GroupAggregate  (cost=52941.91..52941.98 rows=1 width=281)
                                                                                                                                                         Group Key: cgt_account_outgoing.transaction_date, cgt_account_outgoing.uin, cgt_account_outgoing.participant_id, cgt_account_outgoing.isin, cgt_account_outgoing.account_number, gl_3.inv_participant_id, gl_3.inv_account_number, gl_3.inventory_date, gl_3.inv_id, gl_3.transaction_date, cgt_account_outgoing.trn_code, r.reason_code
                                                                                                                                                         ->  Sort  (cost=52941.91..52941.91 rows=1 width=115)
                                                                                                                                                               Sort Key: cgt_account_outgoing.transaction_date, cgt_account_outgoing.uin, cgt_account_outgoing.participant_id, cgt_account_outgoing.isin, cgt_account_outgoing.account_number, gl_3.inv_participant_id, gl_3.inv_account_number, gl_3.inventory_date, gl_3.inv_id, cgt_account_outgoing.trn_code, r.reason_code
                                                                                                                                                               ->  Nested Loop  (cost=1000.99..52941.90 rows=1 width=115)
                                                                                                                                                                     ->  Nested Loop  (cost=1000.55..52939.43 rows=1 width=73)
                                                                                                                                                                           Join Filter: (CASE WHEN (((cgt_account_outgoing.trn_code)::text = 'E060'::text) AND ((cgt_account_outgoing.opr_code)::text = 'DLST'::text)) THEN (CASE s_3.sec_type_id WHEN '3'::text THEN 'Y'::text ELSE 'N'::text END)::bpchar ELSE r.tax_applicable END = 'Y'::bpchar)
                                                                                                                                                                           ->  Gather  (cost=1000.27..52938.43 rows=1 width=79)
                                                                                                                                                                                 Workers Planned: 2
                                                                                                                                                                                 ->  Nested Loop  (cost=0.27..51938.33 rows=1 width=79)
                                                                                                                                                                                       ->  Parallel Append  (cost=0.00..51923.21 rows=27 width=77)
                                                                                                                                                                                             ->  Parallel Seq Scan on cgt_account_outgoing  (cost=0.00..41067.26 rows=16 width=77)
                                                                                                                                                                                                   Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                             ->  Subquery Scan on "*SELECT* 3_15"  (cost=0.00..10842.58 rows=10 width=75)
                                                                                                                                                                                                   ->  Parallel Seq Scan on cgt_corporateaction_outgoing  (cost=0.00..10842.48 rows=4 width=105)
                                                                                                                                                                                                         Filter: ((trn_code IS NOT NULL) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                             ->  Parallel Seq Scan on cgt_account_outgoing_misuse  (cost=0.00..13.24 rows=1 width=74)
                                                                                                                                                                                                   Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                                                                       ->  Index Scan using pk_cgt_regulations on cgt_regulations r  (cost=0.27..0.56 rows=1 width=15)
                                                                                                                                                                                             Index Cond: (((trn_code)::text = (cgt_account_outgoing.trn_code)::text) AND ((opr_code)::text = (cgt_account_outgoing.opr_code)::text) AND ((reason_code)::text = (cgt_account_outgoing.reason_code)::text) AND (io_flag = 'O'::bpchar))
                                                                                                                                                                                             Filter: (inventory_applicable = 'Y'::bpchar)
                                                                                                                                                                           ->  Index Scan using pk_security1 on security s_3  (cost=0.28..0.98 rows=1 width=14)
                                                                                                                                                                                 Index Cond: ((isin)::text = (cgt_account_outgoing.isin)::text)
                                                                                                                                                                     ->  Index Scan using gfir_indx01 on cgt_global_fifo_inv_relation gl_3  (cost=0.43..2.46 rows=1 width=66)
                                                                                                                                                                           Index Cond: ((all_type_out_id = cgt_account_outgoing.ncc_trn_id) AND (all_type_out_det_id = cgt_account_outgoing.acc_out_id))
                                                                                                                                                                           Filter: (((outgoing_type)::text = ANY ('{N,C}'::text[])) AND (cgt_account_outgoing.transaction_date = transaction_date))
                                                                                                                                 ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                                       ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                                             Group Key: ca_12.participant_id
                                                                                                                                             ->  Seq Scan on clearing_account ca_12  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                                   Filter: ((NOT (hashed SubPlan 22)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                                   SubPlan 22
                                                                                                                                                     ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_9  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                                       ->  Subquery Scan on "*SELECT* 2_24"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                                             ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_9  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                                       ->  Subquery Scan on "*SELECT* 3_16"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                                             ->  Seq Scan on cgt_member cgt_member_9  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Subquery Scan on "*SELECT* 5"  (cost=1088.03..53128.65 rows=9 width=634)
                                                                                             ->  Nested Loop  (cost=1088.03..53128.17 rows=9 width=231)
                                                                                                   Join Filter: ((cgt_account_outgoing_1.participant_id)::text = (ca_13.participant_id)::text)
                                                                                                   ->  Nested Loop  (cost=1000.99..52941.90 rows=1 width=107)
                                                                                                         ->  Nested Loop  (cost=1000.55..52939.43 rows=1 width=73)
                                                                                                               Join Filter: (CASE WHEN (((cgt_account_outgoing_1.trn_code)::text = 'E060'::text) AND ((cgt_account_outgoing_1.opr_code)::text = 'DLST'::text)) THEN (CASE s_4.sec_type_id WHEN '3'::text THEN 'Y'::text ELSE 'N'::text END)::bpchar ELSE r_1.tax_applicable END = 'N'::bpchar)
                                                                                                               ->  Gather  (cost=1000.27..52938.43 rows=1 width=79)
                                                                                                                     Workers Planned: 2
                                                                                                                     ->  Nested Loop  (cost=0.27..51938.33 rows=1 width=79)
                                                                                                                           ->  Parallel Append  (cost=0.00..51923.21 rows=27 width=77)
                                                                                                                                 ->  Parallel Seq Scan on cgt_account_outgoing cgt_account_outgoing_1  (cost=0.00..41067.26 rows=16 width=77)
                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Subquery Scan on "*SELECT* 3_17"  (cost=0.00..10842.58 rows=10 width=75)
                                                                                                                                       ->  Parallel Seq Scan on cgt_corporateaction_outgoing cgt_corporateaction_outgoing_1  (cost=0.00..10842.48 rows=4 width=105)
                                                                                                                                             Filter: ((trn_code IS NOT NULL) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Parallel Seq Scan on cgt_account_outgoing_misuse cgt_account_outgoing_misuse_1  (cost=0.00..13.24 rows=1 width=74)
                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                           ->  Index Scan using pk_cgt_regulations on cgt_regulations r_1  (cost=0.27..0.56 rows=1 width=15)
                                                                                                                                 Index Cond: (((trn_code)::text = (cgt_account_outgoing_1.trn_code)::text) AND ((opr_code)::text = (cgt_account_outgoing_1.opr_code)::text) AND ((reason_code)::text = (cgt_account_outgoing_1.reason_code)::text) AND (io_flag = 'O'::bpchar))
                                                                                                                                 Filter: (inventory_applicable = 'Y'::bpchar)
                                                                                                               ->  Index Scan using pk_security1 on security s_4  (cost=0.28..0.98 rows=1 width=14)
                                                                                                                     Index Cond: ((isin)::text = (cgt_account_outgoing_1.isin)::text)
                                                                                                         ->  Index Scan using gfir_indx01 on cgt_global_fifo_inv_relation gl_4  (cost=0.43..2.46 rows=1 width=66)
                                                                                                               Index Cond: ((all_type_out_id = cgt_account_outgoing_1.ncc_trn_id) AND (all_type_out_det_id = cgt_account_outgoing_1.acc_out_id))
                                                                                                               Filter: (((outgoing_type)::text = ANY ('{N,C}'::text[])) AND (cgt_account_outgoing_1.transaction_date = transaction_date) AND ((cgt_account_outgoing_1.participant_id)::text = (participant_id)::text))
                                                                                                   ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                         ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                               Group Key: ca_13.participant_id
                                                                                                               ->  Seq Scan on clearing_account ca_13  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                     Filter: ((NOT (hashed SubPlan 23)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                     SubPlan 23
                                                                                                                       ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_10  (cost=0.00..1.07 rows=7 width=24)
                                                                                                         ->  Subquery Scan on "*SELECT* 2_25"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                               ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_10  (cost=0.00..3.69 rows=169 width=76)
                                                                                                         ->  Subquery Scan on "*SELECT* 3_18"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                               ->  Seq Scan on cgt_member cgt_member_10  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Subquery Scan on "*SELECT* 6"  (cost=1186.66..238297.94 rows=1604 width=661)
                                                                                             ->  Hash Join  (cost=1186.66..238209.72 rows=1604 width=281)
                                                                                                   Hash Cond: ((a_9.participant_id)::text = (x_9.participant_id)::text)
                                                                                                   ->  Gather  (cost=1000.43..237957.71 rows=230 width=73)
                                                                                                         Workers Planned: 2
                                                                                                         ->  Nested Loop Anti Join  (cost=0.43..236934.71 rows=96 width=73)
                                                                                                               ->  Parallel Seq Scan on cgt_account_sale a_9  (cost=0.00..236158.34 rows=96 width=81)
                                                                                                                     Filter: ((to_char(settlement_date, 'MON'::text) = 'JAN'::text) AND (to_char(settlement_date, 'YYYY'::text) = '2019'::text))
                                                                                                               ->  Index Scan using gfir_indx01 on cgt_global_fifo_inv_relation a_10  (cost=0.43..8.01 rows=1 width=8)
                                                                                                                     Index Cond: (all_type_out_id = a_9.market_tran_id)
                                                                                                                     Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                   ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                                         ->  Subquery Scan on x_9  (cost=87.05..164.86 rows=1709 width=32)
                                                                                                               ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                     ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                           Group Key: ca_14.participant_id
                                                                                                                           ->  Seq Scan on clearing_account ca_14  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                 Filter: ((NOT (hashed SubPlan 24)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                 SubPlan 24
                                                                                                                                   ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_11  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                     ->  Subquery Scan on "*SELECT* 2_26"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                           ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_11  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                     ->  Subquery Scan on "*SELECT* 3_19"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                           ->  Seq Scan on cgt_member cgt_member_11  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Subquery Scan on "*SELECT* 7"  (cost=427909.82..882307.20 rows=17 width=712)
                                                                                             ->  Hash Join  (cost=427909.82..882306.14 rows=17 width=221)
                                                                                                   Hash Cond: (("*SELECT* 1_12".participant_id)::text = (x_10.participant_id)::text)
                                                                                                   ->  Append  (cost=427723.59..882119.31 rows=2 width=68)
                                                                                                         ->  Subquery Scan on "*SELECT* 1_12"  (cost=427723.59..442546.28 rows=1 width=71)
                                                                                                               Filter: (NOT (hashed SubPlan 25))
                                                                                                               ->  Index Scan using cgt_accout_indx18 on cgt_account_outgoing a_11  (cost=0.43..14823.10 rows=1 width=105)
                                                                                                                     Index Cond: ((tax_applicable)::text = 'Y'::text)
                                                                                                                     Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                               SubPlan 25
                                                                                                                 ->  Gather  (cost=1000.00..427722.23 rows=372 width=12)
                                                                                                                       Workers Planned: 2
                                                                                                                       ->  Parallel Seq Scan on cgt_global_fifo_inv_relation a_14  (cost=0.00..426685.03 rows=155 width=12)
                                                                                                                             Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                         ->  Subquery Scan on "*SELECT* 2_27"  (cost=428723.44..439573.02 rows=1 width=66)
                                                                                                               Filter: (NOT (hashed SubPlan 25))
                                                                                                               ->  Gather  (cost=1000.28..11849.84 rows=1 width=100)
                                                                                                                     Workers Planned: 2
                                                                                                                     ->  Nested Loop  (cost=0.28..10849.74 rows=1 width=100)
                                                                                                                           ->  Parallel Seq Scan on cgt_corporateaction_outgoing c_10  (cost=0.00..10842.48 rows=4 width=85)
                                                                                                                                 Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                           ->  Index Scan using pk_security1 on security s_5  (cost=0.28..1.80 rows=1 width=14)
                                                                                                                                 Index Cond: ((isin)::text = (c_10.isin)::text)
                                                                                                                                 Filter: ((CASE WHEN (((c_10.trn_code)::text = 'E060'::text) AND ((c_10.opr_code)::text = 'DLST'::text)) THEN (CASE WHEN ((sec_type_id)::text = '3'::text) THEN 'Y'::text ELSE 'N'::text END)::character varying ELSE c_10.tax_applicable END)::text = 'Y'::text)
                                                                                                   ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                                         ->  Subquery Scan on x_10  (cost=87.05..164.86 rows=1709 width=32)
                                                                                                               ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                     ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                           Group Key: ca_15.participant_id
                                                                                                                           ->  Seq Scan on clearing_account ca_15  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                 Filter: ((NOT (hashed SubPlan 26)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                 SubPlan 26
                                                                                                                                   ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_12  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                     ->  Subquery Scan on "*SELECT* 2_28"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                           ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_12  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                     ->  Subquery Scan on "*SELECT* 3_20"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                           ->  Seq Scan on cgt_member cgt_member_12  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Subquery Scan on "*SELECT* 8"  (cost=428909.39..911178.38 rows=162 width=714)
                                                                                             ->  Hash Join  (cost=428909.39..911168.66 rows=162 width=223)
                                                                                                   Hash Cond: (("*SELECT* 1_13".participant_id)::text = (x_11.participant_id)::text)
                                                                                                   ->  Append  (cost=428723.16..910976.70 rows=19 width=71)
                                                                                                         ->  Subquery Scan on "*SELECT* 1_13"  (cost=428723.16..471403.58 rows=18 width=71)
                                                                                                               Filter: (NOT (hashed SubPlan 27))
                                                                                                               ->  Gather  (cost=1000.00..43679.87 rows=37 width=105)
                                                                                                                     Workers Planned: 2
                                                                                                                     ->  Parallel Seq Scan on cgt_account_outgoing a_12  (cost=0.00..42676.17 rows=15 width=105)
                                                                                                                           Filter: (((tax_applicable)::text = 'N'::text) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                               SubPlan 27
                                                                                                                 ->  Gather  (cost=1000.00..427722.23 rows=372 width=12)
                                                                                                                       Workers Planned: 2
                                                                                                                       ->  Parallel Seq Scan on cgt_global_fifo_inv_relation a_15  (cost=0.00..426685.03 rows=155 width=12)
                                                                                                                             Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                         ->  Subquery Scan on "*SELECT* 2_29"  (cost=428723.44..439573.02 rows=1 width=66)
                                                                                                               Filter: (NOT (hashed SubPlan 27))
                                                                                                               ->  Gather  (cost=1000.28..11849.84 rows=1 width=100)
                                                                                                                     Workers Planned: 2
                                                                                                                     ->  Nested Loop  (cost=0.28..10849.74 rows=1 width=100)
                                                                                                                           ->  Parallel Seq Scan on cgt_corporateaction_outgoing c_11  (cost=0.00..10842.48 rows=4 width=85)
                                                                                                                                 Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                           ->  Index Scan using pk_security1 on security s_6  (cost=0.28..1.80 rows=1 width=14)
                                                                                                                                 Index Cond: ((isin)::text = (c_11.isin)::text)
                                                                                                                                 Filter: ((CASE WHEN (((c_11.trn_code)::text = 'E060'::text) AND ((c_11.opr_code)::text = 'DLST'::text)) THEN (CASE WHEN ((sec_type_id)::text = '3'::text) THEN 'Y'::text ELSE 'N'::text END)::character varying ELSE c_11.tax_applicable END)::text = 'N'::text)
                                                                                                   ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                                         ->  Subquery Scan on x_11  (cost=87.05..164.86 rows=1709 width=32)
                                                                                                               ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                                                     ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                                           Group Key: ca_16.participant_id
                                                                                                                           ->  Seq Scan on clearing_account ca_16  (cost=1.09..83.93 rows=623 width=39)
                                                                                                                                 Filter: ((NOT (hashed SubPlan 28)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                                                 SubPlan 28
                                                                                                                                   ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_13  (cost=0.00..1.07 rows=7 width=24)
                                                                                                                     ->  Subquery Scan on "*SELECT* 2_30"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                                           ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_13  (cost=0.00..3.69 rows=169 width=76)
                                                                                                                     ->  Subquery Scan on "*SELECT* 3_21"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                                           ->  Seq Scan on cgt_member cgt_member_13  (cost=0.00..25.31 rows=931 width=54)
                                                                           ->  Subquery Scan on "*SELECT* 9"  (cost=459566.47..459651.41 rows=9 width=762)
                                                                                 ->  Hash Join  (cost=459566.47..459650.92 rows=9 width=382)
                                                                                       Hash Cond: ((ca_17.participant_id)::text = (x_12.participant_id)::text)
                                                                                       ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                             ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                   Group Key: ca_17.participant_id
                                                                                                   ->  Seq Scan on clearing_account ca_17  (cost=1.09..83.93 rows=623 width=39)
                                                                                                         Filter: ((NOT (hashed SubPlan 29)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                         SubPlan 29
                                                                                                           ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_14  (cost=0.00..1.07 rows=7 width=24)
                                                                                             ->  Subquery Scan on "*SELECT* 2_31"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                   ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_14  (cost=0.00..3.69 rows=169 width=76)
                                                                                             ->  Subquery Scan on "*SELECT* 3_22"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                   ->  Seq Scan on cgt_member cgt_member_14  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Hash  (cost=459479.41..459479.41 rows=1 width=174)
                                                                                             ->  Subquery Scan on x_12  (cost=459479.33..459479.41 rows=1 width=174)
                                                                                                   ->  GroupAggregate  (cost=459479.33..459479.40 rows=1 width=182)
                                                                                                         Group Key: s_7.settlement_date, s_7.participant_id, s_7.uin, s_7.isin, s_7.account_number, s_7.market_tran_id
                                                                                                         Filter: (sum(s_7.sell_qty) <> sum((sum(gl_5.inv_outgoing_qty))))
                                                                                                         ->  Sort  (cost=459479.33..459479.33 rows=1 width=107)
                                                                                                               Sort Key: s_7.settlement_date, s_7.participant_id, s_7.uin, s_7.isin, s_7.account_number, s_7.market_tran_id
                                                                                                               ->  Nested Loop  (cost=458710.73..459479.32 rows=1 width=107)
                                                                                                                     ->  Finalize GroupAggregate  (cost=458710.29..458753.70 rows=292 width=94)
                                                                                                                           Group Key: gl_5.profit_loss_tag, gl_5.transaction_date, gl_5.uin, gl_5.account_number, gl_5.participant_id, gl_5.isin, gl_5.all_type_out_id, gl_5.all_type_out_det_id, gl_5.outgoing_type
                                                                                                                           ->  Gather Merge  (cost=458710.29..458743.34 rows=244 width=94)
                                                                                                                                 Workers Planned: 2
                                                                                                                                 ->  Partial GroupAggregate  (cost=457710.27..457715.15 rows=122 width=94)
                                                                                                                                       Group Key: gl_5.profit_loss_tag, gl_5.transaction_date, gl_5.uin, gl_5.account_number, gl_5.participant_id, gl_5.isin, gl_5.all_type_out_id, gl_5.all_type_out_det_id, gl_5.outgoing_type
                                                                                                                                       ->  Sort  (cost=457710.27..457710.57 rows=122 width=70)
                                                                                                                                             Sort Key: gl_5.transaction_date, gl_5.uin, gl_5.account_number, gl_5.participant_id, gl_5.isin, gl_5.all_type_out_id, gl_5.all_type_out_det_id
                                                                                                                                             ->  Parallel Seq Scan on cgt_global_fifo_inv_relation gl_5  (cost=0.00..457706.04 rows=122 width=70)
                                                                                                                                                   Filter: (((outgoing_type)::text = 'M'::text) AND ((profit_loss_tag)::text = 'Y'::text) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                     ->  Index Scan using cgt_acc_sale_indx03 on cgt_account_sale s_7  (cost=0.43..2.46 rows=1 width=75)
                                                                                                                           Index Cond: ((settlement_date = gl_5.transaction_date) AND (market_tran_id = gl_5.all_type_out_id))
                                                                                                                           Filter: ((to_char(settlement_date, 'MON'::text) = 'JAN'::text) AND (to_char(settlement_date, 'YYYY'::text) = '2019'::text))
                                                                           ->  Subquery Scan on "*SELECT* 10"  (cost=296828.35..296913.28 rows=9 width=762)
                                                                                 ->  Hash Join  (cost=296828.35..296912.74 rows=9 width=271)
                                                                                       Hash Cond: ((ca_18.participant_id)::text = (x_13.participant_id)::text)
                                                                                       ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                             ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                   Group Key: ca_18.participant_id
                                                                                                   ->  Seq Scan on clearing_account ca_18  (cost=1.09..83.93 rows=623 width=39)
                                                                                                         Filter: ((NOT (hashed SubPlan 30)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                         SubPlan 30
                                                                                                           ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_15  (cost=0.00..1.07 rows=7 width=24)
                                                                                             ->  Subquery Scan on "*SELECT* 2_32"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                   ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_15  (cost=0.00..3.69 rows=169 width=76)
                                                                                             ->  Subquery Scan on "*SELECT* 3_23"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                   ->  Seq Scan on cgt_member cgt_member_15  (cost=0.00..25.31 rows=931 width=54)
                                                                                       ->  Hash  (cost=296741.29..296741.29 rows=1 width=151)
                                                                                             ->  Subquery Scan on x_13  (cost=296741.22..296741.29 rows=1 width=151)
                                                                                                   ->  GroupAggregate  (cost=296741.22..296741.28 rows=1 width=159)
                                                                                                         Group Key: cgt_account_outgoing_2.transaction_date, cgt_account_outgoing_2.participant_id, cgt_account_outgoing_2.uin, cgt_account_outgoing_2.isin, cgt_account_outgoing_2.account_number, cgt_account_outgoing_2.ncc_trn_id, cgt_account_outgoing_2.trn_code, r_2.reason_code
                                                                                                         Filter: (sum(cgt_account_outgoing_2.outgoing_qty) <> sum(fr.inv_outgoing_qty))
                                                                                                         ->  Sort  (cost=296741.22..296741.23 rows=1 width=109)
                                                                                                               Sort Key: cgt_account_outgoing_2.transaction_date, cgt_account_outgoing_2.participant_id, cgt_account_outgoing_2.uin, cgt_account_outgoing_2.isin, cgt_account_outgoing_2.account_number, cgt_account_outgoing_2.ncc_trn_id, cgt_account_outgoing_2.trn_code, r_2.reason_code
                                                                                                               ->  Nested Loop  (cost=244811.61..296741.21 rows=1 width=109)
                                                                                                                     Join Filter: (CASE WHEN (((cgt_account_outgoing_2.trn_code)::text = 'E060'::text) AND ((cgt_account_outgoing_2.opr_code)::text = 'DLST'::text)) THEN (CASE s_8.sec_type_id WHEN '3'::text THEN 'Y'::text ELSE 'N'::text END)::bpchar ELSE r_2.tax_applicable END = 'Y'::bpchar)
                                                                                                                     ->  Nested Loop  (cost=244811.33..296740.63 rows=1 width=115)
                                                                                                                           ->  Hash Join  (cost=244811.06..296739.65 rows=1 width=113)
                                                                                                                                 Hash Cond: ((cgt_account_outgoing_2.ncc_trn_id = fr.all_type_out_id) AND (cgt_account_outgoing_2.transaction_date = fr.transaction_date))
                                                                                                                                 ->  Gather  (cost=1000.00..52928.21 rows=50 width=81)
                                                                                                                                       Workers Planned: 2
                                                                                                                                       ->  Parallel Append  (cost=0.00..51923.21 rows=27 width=81)
                                                                                                                                             ->  Parallel Seq Scan on cgt_account_outgoing cgt_account_outgoing_2  (cost=0.00..41067.26 rows=16 width=81)
                                                                                                                                                   Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                             ->  Subquery Scan on "*SELECT* 3_24"  (cost=0.00..10842.58 rows=10 width=79)
                                                                                                                                                   ->  Parallel Seq Scan on cgt_corporateaction_outgoing cgt_corporateaction_outgoing_2  (cost=0.00..10842.48 rows=4 width=105)
                                                                                                                                                         Filter: ((trn_code IS NOT NULL) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                             ->  Parallel Seq Scan on cgt_account_outgoing_misuse cgt_account_outgoing_misuse_2  (cost=0.00..13.24 rows=1 width=78)
                                                                                                                                                   Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Hash  (cost=243810.46..243810.46 rows=40 width=48)
                                                                                                                                       ->  Subquery Scan on fr  (cost=243804.02..243810.46 rows=40 width=48)
                                                                                                                                             ->  Finalize GroupAggregate  (cost=243804.02..243810.06 rows=40 width=94)
                                                                                                                                                   Group Key: gl_6.profit_loss_tag, gl_6.transaction_date, gl_6.uin, gl_6.account_number, gl_6.participant_id, gl_6.isin, gl_6.all_type_out_id, gl_6.all_type_out_det_id, gl_6.outgoing_type
                                                                                                                                                   ->  Gather Merge  (cost=243804.02..243808.62 rows=34 width=94)
                                                                                                                                                         Workers Planned: 2
                                                                                                                                                         ->  Partial GroupAggregate  (cost=242803.99..242804.67 rows=17 width=94)
                                                                                                                                                               Group Key: gl_6.profit_loss_tag, gl_6.transaction_date, gl_6.uin, gl_6.account_number, gl_6.participant_id, gl_6.isin, gl_6.all_type_out_id, gl_6.all_type_out_det_id, gl_6.outgoing_type
                                                                                                                                                               ->  Sort  (cost=242803.99..242804.04 rows=17 width=70)
                                                                                                                                                                     Sort Key: gl_6.transaction_date, gl_6.uin, gl_6.account_number, gl_6.participant_id, gl_6.isin, gl_6.all_type_out_id, gl_6.all_type_out_det_id, gl_6.outgoing_type
                                                                                                                                                                     ->  Parallel Index Scan using gfir_indx14 on cgt_global_fifo_inv_relation gl_6  (cost=0.56..242803.65 rows=17 width=70)
                                                                                                                                                                           Index Cond: ((outgoing_type)::text = ANY ('{N,C}'::text[]))
                                                                                                                                                                           Filter: (((profit_loss_tag)::text = 'Y'::text) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                           ->  Index Scan using pk_security1 on security s_8  (cost=0.28..0.98 rows=1 width=14)
                                                                                                                                 Index Cond: ((isin)::text = (cgt_account_outgoing_2.isin)::text)
                                                                                                                     ->  Index Scan using pk_cgt_regulations on cgt_regulations r_2  (cost=0.27..0.56 rows=1 width=15)
                                                                                                                           Index Cond: (((trn_code)::text = (cgt_account_outgoing_2.trn_code)::text) AND ((opr_code)::text = (cgt_account_outgoing_2.opr_code)::text) AND ((reason_code)::text = (cgt_account_outgoing_2.reason_code)::text) AND (io_flag = 'O'::bpchar))
                                                                                                                           Filter: (inventory_applicable = 'Y'::bpchar)
                                                               ->  Subquery Scan on "*SELECT* 11"  (cost=296822.02..296906.94 rows=9 width=786)
                                                                     ->  Hash Join  (cost=296822.02..296906.40 rows=9 width=271)
                                                                           Hash Cond: ((ca_19.participant_id)::text = (x_14.participant_id)::text)
                                                                           ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                 ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                       Group Key: ca_19.participant_id
                                                                                       ->  Seq Scan on clearing_account ca_19  (cost=1.09..83.93 rows=623 width=39)
                                                                                             Filter: ((NOT (hashed SubPlan 31)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                             SubPlan 31
                                                                                               ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_16  (cost=0.00..1.07 rows=7 width=24)
                                                                                 ->  Subquery Scan on "*SELECT* 2_33"  (cost=0.00..5.38 rows=169 width=70)
                                                                                       ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_16  (cost=0.00..3.69 rows=169 width=76)
                                                                                 ->  Subquery Scan on "*SELECT* 3_25"  (cost=0.00..34.62 rows=931 width=70)
                                                                                       ->  Seq Scan on cgt_member cgt_member_16  (cost=0.00..25.31 rows=931 width=54)
                                                                           ->  Hash  (cost=296734.96..296734.96 rows=1 width=151)
                                                                                 ->  Subquery Scan on x_14  (cost=296734.88..296734.96 rows=1 width=151)
                                                                                       ->  GroupAggregate  (cost=296734.88..296734.95 rows=1 width=159)
                                                                                             Group Key: cgt_account_outgoing_3.transaction_date, cgt_account_outgoing_3.participant_id, cgt_account_outgoing_3.uin, cgt_account_outgoing_3.isin, cgt_account_outgoing_3.account_number, cgt_account_outgoing_3.ncc_trn_id, cgt_account_outgoing_3.trn_code, r_3.reason_code
                                                                                             Filter: (sum(cgt_account_outgoing_3.outgoing_qty) <> sum(fr_1.inv_outgoing_qty))
                                                                                             ->  Sort  (cost=296734.88..296734.89 rows=1 width=109)
                                                                                                   Sort Key: cgt_account_outgoing_3.transaction_date, cgt_account_outgoing_3.participant_id, cgt_account_outgoing_3.uin, cgt_account_outgoing_3.isin, cgt_account_outgoing_3.account_number, cgt_account_outgoing_3.ncc_trn_id, cgt_account_outgoing_3.trn_code, r_3.reason_code
                                                                                                   ->  Nested Loop  (cost=244805.08..296734.87 rows=1 width=109)
                                                                                                         Join Filter: (CASE WHEN (((cgt_account_outgoing_3.trn_code)::text = 'E060'::text) AND ((cgt_account_outgoing_3.opr_code)::text = 'DLST'::text)) THEN (CASE s_9.sec_type_id WHEN '3'::text THEN 'Y'::text ELSE 'N'::text END)::bpchar ELSE r_3.tax_applicable END = 'N'::bpchar)
                                                                                                         ->  Nested Loop  (cost=244804.81..296734.29 rows=1 width=115)
                                                                                                               ->  Hash Join  (cost=244804.53..296733.32 rows=1 width=113)
                                                                                                                     Hash Cond: ((cgt_account_outgoing_3.ncc_trn_id = fr_1.all_type_out_id) AND (cgt_account_outgoing_3.acc_out_id = fr_1.all_type_out_det_id) AND (cgt_account_outgoing_3.transaction_date = fr_1.transaction_date))
                                                                                                                     ->  Gather  (cost=1000.00..52928.21 rows=50 width=85)
                                                                                                                           Workers Planned: 2
                                                                                                                           ->  Parallel Append  (cost=0.00..51923.21 rows=27 width=85)
                                                                                                                                 ->  Parallel Seq Scan on cgt_account_outgoing cgt_account_outgoing_3  (cost=0.00..41067.26 rows=16 width=85)
                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Subquery Scan on "*SELECT* 3_26"  (cost=0.00..10842.58 rows=10 width=83)
                                                                                                                                       ->  Parallel Seq Scan on cgt_corporateaction_outgoing cgt_corporateaction_outgoing_3  (cost=0.00..10842.48 rows=4 width=105)
                                                                                                                                             Filter: ((trn_code IS NOT NULL) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                                 ->  Parallel Seq Scan on cgt_account_outgoing_misuse cgt_account_outgoing_misuse_3  (cost=0.00..13.24 rows=1 width=82)
                                                                                                                                       Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                                     ->  Hash  (cost=243804.44..243804.44 rows=5 width=52)
                                                                                                                           ->  Subquery Scan on fr_1  (cost=243803.68..243804.44 rows=5 width=52)
                                                                                                                                 ->  Finalize GroupAggregate  (cost=243803.68..243804.39 rows=5 width=94)
                                                                                                                                       Group Key: gl_7.profit_loss_tag, gl_7.transaction_date, gl_7.uin, gl_7.account_number, gl_7.participant_id, gl_7.isin, gl_7.all_type_out_id, gl_7.all_type_out_det_id, gl_7.outgoing_type
                                                                                                                                       ->  Gather Merge  (cost=243803.68..243804.22 rows=4 width=94)
                                                                                                                                             Workers Planned: 2
                                                                                                                                             ->  Partial GroupAggregate  (cost=242803.66..242803.74 rows=2 width=94)
                                                                                                                                                   Group Key: gl_7.profit_loss_tag, gl_7.transaction_date, gl_7.uin, gl_7.account_number, gl_7.participant_id, gl_7.isin, gl_7.all_type_out_id, gl_7.all_type_out_det_id, gl_7.outgoing_type
                                                                                                                                                   ->  Sort  (cost=242803.66..242803.66 rows=2 width=70)
                                                                                                                                                         Sort Key: gl_7.transaction_date, gl_7.uin, gl_7.account_number, gl_7.participant_id, gl_7.isin, gl_7.all_type_out_id, gl_7.all_type_out_det_id, gl_7.outgoing_type
                                                                                                                                                         ->  Parallel Index Scan using gfir_indx14 on cgt_global_fifo_inv_relation gl_7  (cost=0.56..242803.65 rows=2 width=70)
                                                                                                                                                               Index Cond: ((outgoing_type)::text = ANY ('{N,C}'::text[]))
                                                                                                                                                               Filter: (((profit_loss_tag)::text = 'N'::text) AND (to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                               ->  Index Scan using pk_security1 on security s_9  (cost=0.28..0.98 rows=1 width=14)
                                                                                                                     Index Cond: ((isin)::text = (cgt_account_outgoing_3.isin)::text)
                                                                                                         ->  Index Scan using pk_cgt_regulations on cgt_regulations r_3  (cost=0.27..0.56 rows=1 width=15)
                                                                                                               Index Cond: (((trn_code)::text = (cgt_account_outgoing_3.trn_code)::text) AND ((opr_code)::text = (cgt_account_outgoing_3.opr_code)::text) AND ((reason_code)::text = (cgt_account_outgoing_3.reason_code)::text) AND (io_flag = 'O'::bpchar))
                                                                                                               Filter: (inventory_applicable = 'Y'::bpchar)
                                                               ->  Subquery Scan on "*SELECT* 12"  (cost=186.79..1946.10 rows=4196 width=732)
                                                                     ->  Hash Join  (cost=186.79..1715.32 rows=4196 width=308)
                                                                           Hash Cond: (("*SELECT* 1_14".participant_id)::text = (x_15.participant_id)::text)
                                                                           ->  Append  (cost=0.56..1380.96 rows=491 width=76)
                                                                                 ->  Subquery Scan on "*SELECT* 1_14"  (cost=0.56..991.07 rows=490 width=76)
                                                                                       ->  Nested Loop  (cost=0.56..986.17 rows=490 width=164)
                                                                                             ->  Nested Loop  (cost=0.56..966.38 rows=1 width=76)
                                                                                                   ->  Append  (cost=0.00..961.19 rows=2 width=108)
                                                                                                         ->  Seq Scan on cgt_non_inventory_profit_loss a_13  (cost=0.00..739.18 rows=1 width=108)
                                                                                                               Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                         ->  Seq Scan on cgt_non_inventory_pl_non_filer b_9  (cost=0.00..222.00 rows=1 width=108)
                                                                                                               Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                                   ->  Index Scan using cgt_filer_indx03 on cgt_filer_non_filer_status cs_9  (cost=0.56..2.58 rows=1 width=23)
                                                                                                         Index Cond: ((settlement_date = a_13.transaction_date) AND ((uin)::text = (a_13.uin)::text))
                                                                                                         Filter: (('F'::text) = (filer_non_filer)::text)
                                                                                             ->  Seq Scan on cgt_server_param cgt_server_param_9  (cost=0.00..14.90 rows=490 width=0)
                                                                                 ->  Subquery Scan on "*SELECT* 2_34"  (cost=15.19..387.43 rows=1 width=76)
                                                                                       ->  Index Scan using tran_date_index01 on cgt_non_inventory_profit_loss c_12  (cost=15.19..387.42 rows=1 width=164)
                                                                                             Index Cond: (transaction_date < $35)
                                                                                             Filter: ((to_char(transaction_date, 'MON'::text) = 'JAN'::text) AND (to_char(transaction_date, 'YYYY'::text) = '2019'::text))
                                                                                             InitPlan 32 (returns $35)
                                                                                               ->  Seq Scan on cgt_server_param cgt_server_param_19  (cost=0.00..14.90 rows=490 width=8)
                                                                           ->  Hash  (cost=164.86..164.86 rows=1709 width=32)
                                                                                 ->  Subquery Scan on x_15  (cost=87.05..164.86 rows=1709 width=32)
                                                                                       ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                                                             ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                                                                   Group Key: ca_20.participant_id
                                                                                                   ->  Seq Scan on clearing_account ca_20  (cost=1.09..83.93 rows=623 width=39)
                                                                                                         Filter: ((NOT (hashed SubPlan 33)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                                                                         SubPlan 33
                                                                                                           ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_17  (cost=0.00..1.07 rows=7 width=24)
                                                                                             ->  Subquery Scan on "*SELECT* 2_35"  (cost=0.00..5.38 rows=169 width=70)
                                                                                                   ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_17  (cost=0.00..3.69 rows=169 width=76)
                                                                                             ->  Subquery Scan on "*SELECT* 3_27"  (cost=0.00..34.62 rows=931 width=70)
                                                                                                   ->  Seq Scan on cgt_member cgt_member_17  (cost=0.00..25.31 rows=931 width=54)
                                       ->  Index Scan using pk_security1 on security s  (cost=0.28..0.31 rows=1 width=17)
                                             Index Cond: ((isin)::text = (temp.isin)::text)
                                 ->  Materialize  (cost=87.05..173.41 rows=1709 width=64)
                                       ->  Subquery Scan on x  (cost=87.05..164.86 rows=1709 width=64)
                                             ->  Append  (cost=87.05..147.77 rows=1709 width=96)
                                                   ->  HashAggregate  (cost=87.05..93.14 rows=609 width=70)
                                                         Group Key: ca_21.participant_id
                                                         ->  Seq Scan on clearing_account ca_21  (cost=1.09..83.93 rows=623 width=39)
                                                               Filter: ((NOT (hashed SubPlan 34)) AND ((account_type)::text <> ALL ('{MTS,MF,MSF}'::text[])))
                                                               SubPlan 34
                                                                 ->  Seq Scan on cgt_exempted_participants cgt_exempted_participants_18  (cost=0.00..1.07 rows=7 width=24)
                                                   ->  Subquery Scan on "*SELECT* 2_36"  (cost=0.00..5.38 rows=169 width=70)
                                                         ->  Seq Scan on cgt_non_cm_participants cgt_non_cm_participants_18  (cost=0.00..3.69 rows=169 width=76)
                                                   ->  Subquery Scan on "*SELECT* 3_28"  (cost=0.00..34.62 rows=931 width=70)
                                                         ->  Seq Scan on cgt_member cgt_member_18  (cost=0.00..25.31 rows=931 width=54)
                     ->  Sort  (cost=269711.24..270748.55 rows=414926 width=64)
                           Sort Key: cgt_eligible_uin_all.uin
                           ->  Subquery Scan on cgt_eligible_uin_all  (cost=29358.51..230993.47 rows=414926 width=64)
                                 Filter: (NOT (hashed SubPlan 1))
                                 ->  Append  (cost=29336.21..220598.03 rows=829851 width=96)
                                       ->  Hash Right Join  (cost=29336.21..39349.96 rows=595787 width=64)
                                             Hash Cond: ((fi_2.uin)::text = (cu_2.uin)::text)
                                             ->  Foreign Scan on cgt_corporateforeigner_npo_uin fi_2  (cost=10000.00..20000.00 rows=1000 width=84)
                                                   Oracle query: SELECT /*7adc3c5bb37743da924fd48f44a2ac42*/ r2."UIN", r2."UIN_TYPE" FROM "NCSSLIVE"."CGT_CORPORATEFOREIGNER_NPO_UIN" r2
                                             ->  Hash  (cost=11888.87..11888.87 rows=595787 width=32)
                                                   ->  Seq Scan on cgt_eligible_uin cu_2  (cost=0.00..11888.87 rows=595787 width=32)
                                       ->  Subquery Scan on "*SELECT* 2_37"  (cost=69038.78..100947.22 rows=222800 width=62)
                                             ->  Merge Anti Join  (cost=69038.78..98719.22 rows=222800 width=62)
                                                   Merge Cond: ((mufap_amc_uins_4.uin)::text = (cgt_eligible_uin_4.uin)::text)
                                                   ->  Index Scan using mufap_amc_uins_pk on mufap_amc_uins mufap_amc_uins_4  (cost=0.42..12537.42 rows=445600 width=30)
                                                   ->  Merge Append  (cost=69038.36..77338.87 rows=618314 width=13)
                                                         Sort Key: cgt_eligible_uin_4.uin
                                                         ->  Sort  (cost=69038.06..70527.53 rows=595787 width=13)
                                                               Sort Key: cgt_eligible_uin_4.uin
                                                               ->  Seq Scan on cgt_eligible_uin cgt_eligible_uin_4  (cost=0.00..11888.87 rows=595787 width=13)
                                                         ->  Index Only Scan using pmexuin_indx01 on pmex_uin pu_4  (cost=0.29..628.19 rows=22527 width=13)
                                       ->  Subquery Scan on "*SELECT* 3_29"  (cost=38125.14..70193.73 rows=11264 width=61)
                                             ->  Hash Anti Join  (cost=38125.14..70081.09 rows=11264 width=61)
                                                   Hash Cond: ((pu_5.uin)::text = (cgt_eligible_uin_5.uin)::text)
                                                   ->  Seq Scan on pmex_uin pu_5  (cost=0.00..401.27 rows=22527 width=29)
                                                   ->  Hash  (cost=25107.81..25107.81 rows=1041387 width=13)
                                                         ->  Append  (cost=0.00..25107.81 rows=1041387 width=13)
                                                               ->  Seq Scan on cgt_eligible_uin cgt_eligible_uin_5  (cost=0.00..11888.87 rows=595787 width=13)
                                                               ->  Seq Scan on mufap_amc_uins mufap_amc_uins_5  (cost=0.00..8012.00 rows=445600 width=13)
                                 SubPlan 1
                                   ->  Seq Scan on cgt_ipo_uin  (cost=0.00..19.84 rows=984 width=20)
(897 rows)

